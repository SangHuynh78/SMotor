
SMotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000002da  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800138  00800138  000003a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007fa  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069b  00000000  00000000  00000c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003bf  00000000  00000000  000012dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  0000169c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f1  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c4  00000000  00000000  00001af1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001bb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ed       	ldi	r30, 0xDA	; 218
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 33       	cpi	r26, 0x38	; 56
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e3       	ldi	r26, 0x38	; 56
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 34       	cpi	r26, 0x42	; 66
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_16>:
uint8_t S_pul_count;
uint8_t A2S_table[50] = {40,};
uint8_t Z_noise = 0;

//ISR for timer 0 overflow
ISR(TIMER0_OVF_vect) {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	TCCR0B = 0;					//stop timer
  b2:	15 bc       	out	0x25, r1	; 37
	PUL_PORT &= ~(1<<PUL_PIN);	//clear pulse pin
  b4:	5f 98       	cbi	0x0b, 7	; 11
	TCNT0 = 256 - 80;			//reinit counter 0
  b6:	80 eb       	ldi	r24, 0xB0	; 176
  b8:	86 bd       	out	0x26, r24	; 38
}
  ba:	8f 91       	pop	r24
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <__vector_13>:

//ISR for timer 1 overflow
ISR(TIMER1_OVF_vect) {
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	8f 93       	push	r24
	TCCR1B = 0;					//stop timer
  d2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	flag_reinit_data = 1;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
	TCNT1 = 0;					//clear counter 1
  dc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  e0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
}
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <main>:

int main(void)
{
	// Output pin
	PUL_DDR  |=  (1<<PUL_PIN);
  f0:	57 9a       	sbi	0x0a, 7	; 10
	PUL_PORT &= ~(1<<PUL_PIN);
  f2:	5f 98       	cbi	0x0b, 7	; 11
	// Input pin
	A_DDR  &= ~(1<<A_PIN);
  f4:	3d 98       	cbi	0x07, 5	; 7
	Z_DDR  &= ~(1<<Z_PIN);
  f6:	3b 98       	cbi	0x07, 3	; 7
	A_PORT |= (1<<A_PIN);
  f8:	45 9a       	sbi	0x08, 5	; 8
	Z_PORT |= (1<<Z_PIN);
  fa:	43 9a       	sbi	0x08, 3	; 8
	// Init timer 0
	TIMSK0 |= (1 << TOIE0);				// enable overflow timer 0
  fc:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 100:	81 60       	ori	r24, 0x01	; 1
 102:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0	= (256 - 80);				// pulse width is 10 us with clock of 8 Mhz
 106:	80 eb       	ldi	r24, 0xB0	; 176
 108:	86 bd       	out	0x26, r24	; 38
	// Init timer 1
	TIMSK1 |= (1 << TOIE1);				// enable overflow timer 1
 10a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TCNT1 = 0;							// init counter 1
 114:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 118:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	sei();								// enable interrupt
 11c:	78 94       	sei
					{
						PUL_PORT |= (1 << PUL_PIN);
						TCCR0B |= (1 << CS00);		// start timer 0
						S_pul_count ++;
					};
					if (S_pul_count < Step_data.S)  state = PULSEA_1;	
 11e:	84 e0       	ldi	r24, 0x04	; 4
 120:	f8 2e       	mov	r15, r24
// 				}
				break;
			case PULSEA_0:
				if (flag_reinit_data) 
				{
					state = REINIT_DATA;
 122:	ee 24       	eor	r14, r14
 124:	e3 94       	inc	r14
			case INIT_DATA:
				Step_data.S = Step_data_default.S;
				Step_data.Q = Step_data_default.Q;
				S_pul_count = 0;
				A_pul_count = 0;
				A2S_table[0] = 40;
 126:	98 e2       	ldi	r25, 0x28	; 40
 128:	d9 2e       	mov	r13, r25
				for (int i = 1; i < Step_data.S; i++)
				{
					if (i < 5) A2S_table[i] = A2S_table[i-1] + Step_data.Q + 5 - i;
					else A2S_table[i] = A2S_table[i-1] + Step_data.Q;
				}
				state = WAIT_Z;
 12a:	22 e0       	ldi	r18, 0x02	; 2
 12c:	c2 2e       	mov	r12, r18
				break;
			case REINIT_DATA:
				flag_reinit_data = 0;
				//Step_data.Q = (A_pul - (A_pul_count - 40) - 10) / ((Step_data.S - S_pul_count + 1) - 1);
				Step_data.Q = (A_pul - A_pul_count + 30) / (Step_data.S - S_pul_count);
 12e:	c6 e9       	ldi	r28, 0x96	; 150
 130:	d0 e0       	ldi	r29, 0x00	; 0
				for (int i = S_pul_count + 1; i < Step_data.S; i++)
				{
					if (i < S_pul_count + 5) A2S_table[i] = A2S_table[i-1] + Step_data.Q + S_pul_count + 5 - i;
					else A2S_table[i] = A2S_table[i-1] + Step_data.Q;
				}
				state = PULSEA_0;
 132:	33 e0       	ldi	r19, 0x03	; 3
 134:	b3 2e       	mov	r11, r19
	TIMSK1 |= (1 << TOIE1);				// enable overflow timer 1
	TCNT1 = 0;							// init counter 1
	sei();								// enable interrupt
    while (1)
    {
		switch (state)
 136:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <state>
 13a:	82 30       	cpi	r24, 0x02	; 2
 13c:	09 f4       	brne	.+2      	; 0x140 <main+0x50>
 13e:	65 c0       	rjmp	.+202    	; 0x20a <main+0x11a>
 140:	38 f5       	brcc	.+78     	; 0x190 <main+0xa0>
 142:	88 23       	and	r24, r24
 144:	61 f1       	breq	.+88     	; 0x19e <main+0xae>
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	c1 f7       	brne	.-16     	; 0x13a <main+0x4a>
					else A2S_table[i] = A2S_table[i-1] + Step_data.Q;
				}
				state = WAIT_Z;
				break;
			case REINIT_DATA:
				flag_reinit_data = 0;
 14a:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <__data_end>
				//Step_data.Q = (A_pul - (A_pul_count - 40) - 10) / ((Step_data.S - S_pul_count + 1) - 1);
				Step_data.Q = (A_pul - A_pul_count + 30) / (Step_data.S - S_pul_count);
 14e:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <A_pul_count>
 152:	00 91 40 01 	lds	r16, 0x0140	; 0x800140 <Step_data+0x4>
 156:	10 e0       	ldi	r17, 0x00	; 0
 158:	40 91 3a 01 	lds	r20, 0x013A	; 0x80013a <S_pul_count>
 15c:	24 2f       	mov	r18, r20
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	ce 01       	movw	r24, r28
 162:	8f 1b       	sub	r24, r31
 164:	91 09       	sbc	r25, r1
 166:	b8 01       	movw	r22, r16
 168:	62 1b       	sub	r22, r18
 16a:	73 0b       	sbc	r23, r19
 16c:	0e 94 43 01 	call	0x286	; 0x286 <__divmodhi4>
 170:	76 2f       	mov	r23, r22
 172:	60 93 41 01 	sts	0x0141, r22	; 0x800141 <Step_data+0x5>
				A2S_table[S_pul_count] = A_pul_count + 1;
 176:	d9 01       	movw	r26, r18
 178:	a0 50       	subi	r26, 0x00	; 0
 17a:	bf 4f       	sbci	r27, 0xFF	; 255
 17c:	ff 5f       	subi	r31, 0xFF	; 255
 17e:	fc 93       	st	X, r31
				for (int i = S_pul_count + 1; i < Step_data.S; i++)
 180:	c9 01       	movw	r24, r18
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	fd 01       	movw	r30, r26
				{
					if (i < S_pul_count + 5) A2S_table[i] = A2S_table[i-1] + Step_data.Q + S_pul_count + 5 - i;
 186:	2c 5f       	subi	r18, 0xFC	; 252
 188:	3f 4f       	sbci	r19, 0xFF	; 255
 18a:	4b 5f       	subi	r20, 0xFB	; 251
 18c:	46 0f       	add	r20, r22
			case REINIT_DATA:
				flag_reinit_data = 0;
				//Step_data.Q = (A_pul - (A_pul_count - 40) - 10) / ((Step_data.S - S_pul_count + 1) - 1);
				Step_data.Q = (A_pul - A_pul_count + 30) / (Step_data.S - S_pul_count);
				A2S_table[S_pul_count] = A_pul_count + 1;
				for (int i = S_pul_count + 1; i < Step_data.S; i++)
 18e:	37 c0       	rjmp	.+110    	; 0x1fe <main+0x10e>
	TIMSK1 |= (1 << TOIE1);				// enable overflow timer 1
	TCNT1 = 0;							// init counter 1
	sei();								// enable interrupt
    while (1)
    {
		switch (state)
 190:	83 30       	cpi	r24, 0x03	; 3
 192:	09 f4       	brne	.+2      	; 0x196 <main+0xa6>
 194:	3f c0       	rjmp	.+126    	; 0x214 <main+0x124>
 196:	84 30       	cpi	r24, 0x04	; 4
 198:	09 f4       	brne	.+2      	; 0x19c <main+0xac>
 19a:	72 c0       	rjmp	.+228    	; 0x280 <main+0x190>
 19c:	ce cf       	rjmp	.-100    	; 0x13a <main+0x4a>
		{
			case INIT_DATA:
				Step_data.S = Step_data_default.S;
 19e:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <Step_data_default+0x4>
 1a2:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <Step_data+0x4>
				Step_data.Q = Step_data_default.Q;
 1a6:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <Step_data_default+0x5>
 1aa:	30 93 41 01 	sts	0x0141, r19	; 0x800141 <Step_data+0x5>
				S_pul_count = 0;
 1ae:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <S_pul_count>
				A_pul_count = 0;
 1b2:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <A_pul_count>
				A2S_table[0] = 40;
 1b6:	d0 92 00 01 	sts	0x0100, r13	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ba:	e0 e0       	ldi	r30, 0x00	; 0
 1bc:	f1 e0       	ldi	r31, 0x01	; 1
				for (int i = 1; i < Step_data.S; i++)
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	50 e0       	ldi	r21, 0x00	; 0
				{
					if (i < 5) A2S_table[i] = A2S_table[i-1] + Step_data.Q + 5 - i;
 1c4:	65 e0       	ldi	r22, 0x05	; 5
 1c6:	63 0f       	add	r22, r19
				Step_data.S = Step_data_default.S;
				Step_data.Q = Step_data_default.Q;
				S_pul_count = 0;
				A_pul_count = 0;
				A2S_table[0] = 40;
				for (int i = 1; i < Step_data.S; i++)
 1c8:	84 17       	cp	r24, r20
 1ca:	95 07       	cpc	r25, r21
 1cc:	64 f4       	brge	.+24     	; 0x1e6 <main+0xf6>
				{
					if (i < 5) A2S_table[i] = A2S_table[i-1] + Step_data.Q + 5 - i;
 1ce:	20 81       	ld	r18, Z
 1d0:	85 30       	cpi	r24, 0x05	; 5
 1d2:	91 05       	cpc	r25, r1
 1d4:	1c f4       	brge	.+6      	; 0x1dc <main+0xec>
 1d6:	26 0f       	add	r18, r22
 1d8:	28 1b       	sub	r18, r24
 1da:	01 c0       	rjmp	.+2      	; 0x1de <main+0xee>
					else A2S_table[i] = A2S_table[i-1] + Step_data.Q;
 1dc:	23 0f       	add	r18, r19
 1de:	21 83       	std	Z+1, r18	; 0x01
				Step_data.S = Step_data_default.S;
				Step_data.Q = Step_data_default.Q;
				S_pul_count = 0;
				A_pul_count = 0;
				A2S_table[0] = 40;
				for (int i = 1; i < Step_data.S; i++)
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	31 96       	adiw	r30, 0x01	; 1
 1e4:	f1 cf       	rjmp	.-30     	; 0x1c8 <main+0xd8>
				{
					if (i < 5) A2S_table[i] = A2S_table[i-1] + Step_data.Q + 5 - i;
					else A2S_table[i] = A2S_table[i-1] + Step_data.Q;
				}
				state = WAIT_Z;
 1e6:	c0 92 39 01 	sts	0x0139, r12	; 0x800139 <state>
				break;
 1ea:	a5 cf       	rjmp	.-182    	; 0x136 <main+0x46>
				//Step_data.Q = (A_pul - (A_pul_count - 40) - 10) / ((Step_data.S - S_pul_count + 1) - 1);
				Step_data.Q = (A_pul - A_pul_count + 30) / (Step_data.S - S_pul_count);
				A2S_table[S_pul_count] = A_pul_count + 1;
				for (int i = S_pul_count + 1; i < Step_data.S; i++)
				{
					if (i < S_pul_count + 5) A2S_table[i] = A2S_table[i-1] + Step_data.Q + S_pul_count + 5 - i;
 1ec:	50 81       	ld	r21, Z
 1ee:	28 17       	cp	r18, r24
 1f0:	39 07       	cpc	r19, r25
 1f2:	4c f0       	brlt	.+18     	; 0x206 <main+0x116>
 1f4:	54 0f       	add	r21, r20
 1f6:	58 1b       	sub	r21, r24
					else A2S_table[i] = A2S_table[i-1] + Step_data.Q;
 1f8:	51 83       	std	Z+1, r21	; 0x01
			case REINIT_DATA:
				flag_reinit_data = 0;
				//Step_data.Q = (A_pul - (A_pul_count - 40) - 10) / ((Step_data.S - S_pul_count + 1) - 1);
				Step_data.Q = (A_pul - A_pul_count + 30) / (Step_data.S - S_pul_count);
				A2S_table[S_pul_count] = A_pul_count + 1;
				for (int i = S_pul_count + 1; i < Step_data.S; i++)
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	31 96       	adiw	r30, 0x01	; 1
 1fe:	80 17       	cp	r24, r16
 200:	91 07       	cpc	r25, r17
 202:	a4 f3       	brlt	.-24     	; 0x1ec <main+0xfc>
 204:	04 c0       	rjmp	.+8      	; 0x20e <main+0x11e>
				{
					if (i < S_pul_count + 5) A2S_table[i] = A2S_table[i-1] + Step_data.Q + S_pul_count + 5 - i;
					else A2S_table[i] = A2S_table[i-1] + Step_data.Q;
 206:	57 0f       	add	r21, r23
 208:	f7 cf       	rjmp	.-18     	; 0x1f8 <main+0x108>
				}
				state = PULSEA_0;
				break;
			case WAIT_Z:
				if (PINC & (1 << Z_PIN)) state = PULSEA_0;
 20a:	33 9b       	sbis	0x06, 3	; 6
 20c:	94 cf       	rjmp	.-216    	; 0x136 <main+0x46>
				for (int i = S_pul_count + 1; i < Step_data.S; i++)
				{
					if (i < S_pul_count + 5) A2S_table[i] = A2S_table[i-1] + Step_data.Q + S_pul_count + 5 - i;
					else A2S_table[i] = A2S_table[i-1] + Step_data.Q;
				}
				state = PULSEA_0;
 20e:	b0 92 39 01 	sts	0x0139, r11	; 0x800139 <state>
				break;
 212:	91 cf       	rjmp	.-222    	; 0x136 <main+0x46>
// 					state = PULSEA_0;
// 					Z_noise = 0;
// 				}
				break;
			case PULSEA_0:
				if (flag_reinit_data) 
 214:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
 218:	88 23       	and	r24, r24
 21a:	19 f0       	breq	.+6      	; 0x222 <main+0x132>
				{
					state = REINIT_DATA;
 21c:	e0 92 39 01 	sts	0x0139, r14	; 0x800139 <state>
					break;
 220:	8a cf       	rjmp	.-236    	; 0x136 <main+0x46>
				}
				if (PINC & (1 << A_PIN))	
 222:	35 9b       	sbis	0x06, 5	; 6
 224:	27 c0       	rjmp	.+78     	; 0x274 <main+0x184>
				{
					TCCR1B &= ~(1 << CS10);			// stop timer 1
 226:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 22a:	8e 7f       	andi	r24, 0xFE	; 254
 22c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
					A_pul_count++;
 230:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <A_pul_count>
 234:	8f 5f       	subi	r24, 0xFF	; 255
 236:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <A_pul_count>
					if (A_pul_count == A2S_table[S_pul_count])
 23a:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <S_pul_count>
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	e0 50       	subi	r30, 0x00	; 0
 242:	ff 4f       	sbci	r31, 0xFF	; 255
 244:	90 81       	ld	r25, Z
 246:	89 13       	cpse	r24, r25
 248:	09 c0       	rjmp	.+18     	; 0x25c <main+0x16c>
					{
						PUL_PORT |= (1 << PUL_PIN);
 24a:	5f 9a       	sbi	0x0b, 7	; 11
						TCCR0B |= (1 << CS00);		// start timer 0
 24c:	85 b5       	in	r24, 0x25	; 37
 24e:	81 60       	ori	r24, 0x01	; 1
 250:	85 bd       	out	0x25, r24	; 37
						S_pul_count ++;
 252:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <S_pul_count>
 256:	8f 5f       	subi	r24, 0xFF	; 255
 258:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <S_pul_count>
					};
					if (S_pul_count < Step_data.S)  state = PULSEA_1;	
 25c:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <Step_data+0x4>
 260:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <S_pul_count>
 264:	89 17       	cp	r24, r25
 266:	18 f4       	brcc	.+6      	; 0x26e <main+0x17e>
 268:	f0 92 39 01 	sts	0x0139, r15	; 0x800139 <state>
 26c:	64 cf       	rjmp	.-312    	; 0x136 <main+0x46>
					else state = INIT_DATA;
 26e:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <state>
 272:	61 cf       	rjmp	.-318    	; 0x136 <main+0x46>
				}
				else TCCR1B |=  (1 << CS12);				//start timer 1 with prescaler=256, overflow in 2.09s
 274:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 278:	84 60       	ori	r24, 0x04	; 4
 27a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 27e:	5b cf       	rjmp	.-330    	; 0x136 <main+0x46>
				break;
			case PULSEA_1:
			//test
			//	if (A_pul_count == 100) state = REINIT_DATA;
			//test
				if ((PINC & (1 << A_PIN)) == 0) state = PULSEA_0;
 280:	35 9b       	sbis	0x06, 5	; 6
 282:	c5 cf       	rjmp	.-118    	; 0x20e <main+0x11e>
 284:	58 cf       	rjmp	.-336    	; 0x136 <main+0x46>

00000286 <__divmodhi4>:
 286:	97 fb       	bst	r25, 7
 288:	07 2e       	mov	r0, r23
 28a:	16 f4       	brtc	.+4      	; 0x290 <__divmodhi4+0xa>
 28c:	00 94       	com	r0
 28e:	07 d0       	rcall	.+14     	; 0x29e <__divmodhi4_neg1>
 290:	77 fd       	sbrc	r23, 7
 292:	09 d0       	rcall	.+18     	; 0x2a6 <__divmodhi4_neg2>
 294:	0e 94 57 01 	call	0x2ae	; 0x2ae <__udivmodhi4>
 298:	07 fc       	sbrc	r0, 7
 29a:	05 d0       	rcall	.+10     	; 0x2a6 <__divmodhi4_neg2>
 29c:	3e f4       	brtc	.+14     	; 0x2ac <__divmodhi4_exit>

0000029e <__divmodhi4_neg1>:
 29e:	90 95       	com	r25
 2a0:	81 95       	neg	r24
 2a2:	9f 4f       	sbci	r25, 0xFF	; 255
 2a4:	08 95       	ret

000002a6 <__divmodhi4_neg2>:
 2a6:	70 95       	com	r23
 2a8:	61 95       	neg	r22
 2aa:	7f 4f       	sbci	r23, 0xFF	; 255

000002ac <__divmodhi4_exit>:
 2ac:	08 95       	ret

000002ae <__udivmodhi4>:
 2ae:	aa 1b       	sub	r26, r26
 2b0:	bb 1b       	sub	r27, r27
 2b2:	51 e1       	ldi	r21, 0x11	; 17
 2b4:	07 c0       	rjmp	.+14     	; 0x2c4 <__udivmodhi4_ep>

000002b6 <__udivmodhi4_loop>:
 2b6:	aa 1f       	adc	r26, r26
 2b8:	bb 1f       	adc	r27, r27
 2ba:	a6 17       	cp	r26, r22
 2bc:	b7 07       	cpc	r27, r23
 2be:	10 f0       	brcs	.+4      	; 0x2c4 <__udivmodhi4_ep>
 2c0:	a6 1b       	sub	r26, r22
 2c2:	b7 0b       	sbc	r27, r23

000002c4 <__udivmodhi4_ep>:
 2c4:	88 1f       	adc	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	5a 95       	dec	r21
 2ca:	a9 f7       	brne	.-22     	; 0x2b6 <__udivmodhi4_loop>
 2cc:	80 95       	com	r24
 2ce:	90 95       	com	r25
 2d0:	bc 01       	movw	r22, r24
 2d2:	cd 01       	movw	r24, r26
 2d4:	08 95       	ret

000002d6 <_exit>:
 2d6:	f8 94       	cli

000002d8 <__stop_program>:
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <__stop_program>
